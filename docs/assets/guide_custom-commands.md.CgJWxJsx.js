import{_ as s,c as a,o as i,f as e}from"./chunks/framework.BG74BkEs.js";const g=JSON.parse('{"title":"Custom Commands","description":"","frontmatter":{},"headers":[],"relativePath":"guide/custom-commands.md","filePath":"guide/custom-commands.md","lastUpdated":1703963049000}'),n={name:"guide/custom-commands.md"},t=e(`<h1 id="custom-commands" tabindex="-1">Custom Commands <a class="header-anchor vp-link" href="#custom-commands" aria-label="Permalink to &quot;Custom Commands&quot;">​</a></h1><p>Command represents a single operation, that controls what happens on the scene; e.g., it can be used to change a background, move a character or load another naninovel script. Parametrized command sequences defined in <a href="/naninovel-docs/guide/naninovel-scripts" class="vp-link">naninovel scripts</a> effectively controls the game flow. You can find available built-in commands in the <a href="/naninovel-docs/api/" class="vp-link">API reference</a>. In code, all the built-in script command implementations are defined under <code>Naninovel.Commands</code> namespace.</p><h2 id="adding-custom-command" tabindex="-1">Adding Custom Command <a class="header-anchor vp-link" href="#adding-custom-command" aria-label="Permalink to &quot;Adding Custom Command&quot;">​</a></h2><p>To add your own custom script command, create a new C# class derived from <code>Command</code> and implement <code>ExecuteAsync</code> abstract method. The created class will automatically be picked up by the engine and you&#39;ll be able to invoke the command from the naninovel scripts by either the class name or an alias (if assigned). To assign an alias to the naninovel command, apply <code>CommandAlias</code> attribute to the class.</p><p>Below is an example of a custom command, that can be invoked from naninovel scripts as <code>@HelloWorld</code> or <code>@hello</code> to print &quot;Hello World!&quot; to the console and can also take an optional <code>name</code> parameter (eg, <code>@hello name:Felix</code>) to greet the provided name instead of the world.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Name)) Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Hello, {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UniTask.CompletedTask;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When adding custom implementation types under a non-predefined assembly (via <a href="https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html" class="vp-link" target="_blank" rel="noreferrer">assembly definitions<span class="external-link-icon"> ↗</span></a>), add the assembly name to the <code>Type Assemblies</code> list found in the engine configuration menu. Otherwise, the engine won&#39;t be able to locate your custom types.</p></div><h3 id="execute-method" tabindex="-1">Execute Method <a class="header-anchor vp-link" href="#execute-method" aria-label="Permalink to &quot;Execute Method&quot;">​</a></h3><p><code>ExecuteAsync</code> is an async method invoked when the command is executed by the scripts player; put the command logic there. Use <a href="/naninovel-docs/guide/engine-services" class="vp-link">engine services</a> to access the engine built-in systems. Naninovel script execution will halt until this method returns a completed task in case <code>Wait</code> parameter is <code>true</code>.</p><h3 id="asynctoken" tabindex="-1">AsyncToken <a class="header-anchor vp-link" href="#asynctoken" aria-label="Permalink to &quot;AsyncToken&quot;">​</a></h3><p>Notice the optional <code>AsyncToken</code> argument provided for the <code>ExecuteAsync</code> method. When performing <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/" class="vp-link" target="_blank" rel="noreferrer">async operations<span class="external-link-icon"> ↗</span></a>, make sure to check the token for cancellation and completion requests after each async operation and react accordingly:</p><ul><li><code>AsyncToken.Canceled</code> means the engine has been destroyed or reset; in both cases it&#39;s no longer safe to use the engine APIs and any state mutations will lead to an undefined behaviour. When canceled, the command implementation is expected to throw <code>AsyncOperationCanceledException</code> immediately, discarding any currently performed activities.</li><li><code>AsyncToken.Completed</code> means the command is expected to complete all the activities as fast as possible; eg, if you&#39;re running animations, finish them instantly, no matter the expected duration. This usually happens when player activates continue input or a save game operation is started.</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformSomethingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Engine may have been destroyed while the above method was running;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // below will check and throw the exception if that&#39;s the case.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    asyncToken.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThrowIfCanceled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It&#39;s safe to continue using engine APIs after the check.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someUI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IUIManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // In case completion is requested, fade the UI instantly.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fadeDuration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncToken.Completed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUI.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ChangeVisibilityAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fadeDuration, asyncToken);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Notice method above accepted the token; such methods will handle</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // cancellations internally, so you don&#39;t have to check after them.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="parameter-types" tabindex="-1">Parameter Types <a class="header-anchor vp-link" href="#parameter-types" aria-label="Permalink to &quot;Parameter Types&quot;">​</a></h3><p>To expose a command parameter to naninovel scripts, add a public field to the command class with one of the supported types:</p><table><thead><tr><th>Field Type</th><th>Value Type</th><th>Script Example</th></tr></thead><tbody><tr><td>StringParameter</td><td>String</td><td><code>LoremIpsum</code>, <code>&quot;Lorem ipsum&quot;</code></td></tr><tr><td>LocalizableTextParameter</td><td>LocalizableText</td><td><code>&quot;Lorem ipsum|#id|&quot;</code></td></tr><tr><td>IntegerParameter</td><td>Int32</td><td><code>10</code>, <code>0</code>, <code>-1</code></td></tr><tr><td>DecimalParameter</td><td>Single</td><td><code>0.525</code>, <code>-55.1</code></td></tr><tr><td>BooleanParameter</td><td>Boolean</td><td><code>true</code>, <code>false</code></td></tr><tr><td>NamedStringParameter</td><td>NamedString</td><td><code>Script001.LabelName</code>, <code>.LabelName</code></td></tr><tr><td>NamedIntegerParameter</td><td>NamedInteger</td><td><code>Yuko.5</code></td></tr><tr><td>NamedDecimalParameter</td><td>NamedFloat</td><td><code>Kohaku.-10.25</code></td></tr><tr><td>NamedBooleanParameter</td><td>NamedBoolean</td><td><code>Misaki.false</code></td></tr><tr><td>StringListParameter</td><td>List&lt;String&gt;</td><td><code>Lorem,ipsum,&quot;doler sit amet&quot;</code></td></tr><tr><td>IntegerListParameter</td><td>List&lt;Int32&gt;</td><td><code>10,-1,0</code></td></tr><tr><td>DecimalListParameter</td><td>List&lt;Single&gt;</td><td><code>0.2,10.5,-88.99</code></td></tr><tr><td>BooleanListParameter</td><td>List&lt;Boolean&gt;</td><td><code>true,false,true</code></td></tr><tr><td>NamedStringListParameter</td><td>List&lt;NamedString&gt;</td><td><code>Felix.Happy,Jenna.Confidence</code></td></tr><tr><td>NamedIntegerListParameter</td><td>List&lt;NamedInteger&gt;</td><td><code>Yuko.5,Misaki.-8</code></td></tr><tr><td>NamedDecimalListParameter</td><td>List&lt;NamedFloat&gt;</td><td><code>Nanikun.88.99,Yuko.-5.1</code></td></tr><tr><td>NamedBooleanListParameter</td><td>List&lt;NamedBoolean&gt;</td><td><code>Misaki.false,Kohaku.true</code></td></tr></tbody></table><h3 id="parameter-alias" tabindex="-1">Parameter Alias <a class="header-anchor vp-link" href="#parameter-alias" aria-label="Permalink to &quot;Parameter Alias&quot;">​</a></h3><p>Optionally, you can apply <code>[ParameterAlias]</code> attribute to the field to assign an alias name to the parameter allowing it to be used instead of the field name when referencing the parameter in naninovel scripts. If you wish to make the parameter nameless, set <code>NamelessParameterAlias</code> constant (empty string) as the alias; please note, that only one nameless parameter is allowed per command.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParameterAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NamelessParameterAlias)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyNamelesParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParameterAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myParam&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@cmd</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> &quot;value of the nameless param&quot;</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> myParam:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">&quot;value of &#39;MyParameter&#39; param&quot;</span></span></code></pre></div><h3 id="required-parameter" tabindex="-1">Required Parameter <a class="header-anchor vp-link" href="#required-parameter" aria-label="Permalink to &quot;Required Parameter&quot;">​</a></h3><p>To make parameter required (causing an error to be logged when it&#39;s not specified in naninovel script), apply <code>[RequiredParameter]</code> attribute to the field. When the attribute is not applied, parameter is considered optional.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequiredParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRequiredParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="optional-parameter" tabindex="-1">Optional Parameter <a class="header-anchor vp-link" href="#optional-parameter" aria-label="Permalink to &quot;Optional Parameter&quot;">​</a></h3><p>When parameter is not required, it may or may not have value assigned in the scenario script; use <code>HasValue</code> property to test whether that&#39;s the case. Optionally, you can use <code>Assigned()</code> static method, which takes parameter instance and returns true when the provided parameter is not null and has a value assigned.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyOptionalParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MyOptionalParameter.HasValue) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyOptionalParameter)) { }</span></span></code></pre></div><h3 id="localizable-command" tabindex="-1">Localizable Command <a class="header-anchor vp-link" href="#localizable-command" aria-label="Permalink to &quot;Localizable Command&quot;">​</a></h3><p>In case the command has parameters that can be localized (text directly presented to the user, usually), implement <code>Command.ILocalizable</code> interface to add the command to the generated <a href="/naninovel-docs/guide/localization#scripts-localization" class="vp-link">script localization</a> documents and use <code>LocalizableTextParameter</code> parameter type.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrintText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ILocalizable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LocalizableTextParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="preloadable-command" tabindex="-1">Preloadable Command <a class="header-anchor vp-link" href="#preloadable-command" aria-label="Permalink to &quot;Preloadable Command&quot;">​</a></h3><p>In case execution of the command requires loading some resources, implement <code>Command.IPreloadable</code> interface to preload the required resources when the game is loading; find more about memory management in the <a href="/naninovel-docs/guide/resource-providers#memory-management" class="vp-link">resource providers guide</a>.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlayAudioClip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IPreloadable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClipPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PreloadResourcesAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClipPath) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClipPath.DynamicValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. (load the audio clip here)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReleasePreloadedResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClipPath) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClipPath.DynamicValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. (unload the clip here)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Notice <code>ClipPath.DynamicValue</code> check: we wouldn&#39;t be able to preload the resource in case the name is only known when the command is executed (ie parameter contain <a href="/naninovel-docs/guide/script-expressions" class="vp-link">script expressions</a>); in this case the resource should be loaded inside <code>ExecuteAsync</code> method.</p><h3 id="command-examples" tabindex="-1">Command Examples <a class="header-anchor vp-link" href="#command-examples" aria-label="Permalink to &quot;Command Examples&quot;">​</a></h3><p>You can find scripts with all the built-in command implementations at <code>Naninovel/Runtime/Commands</code> package folder; feel free to use them as a reference when implementing your own custom commands.</p><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p>Another example of adding custom commands to add/remove items of an inventory system can be found in the <a href="https://github.com/naninovel/samples/tree/main/unity/inventory" class="vp-link" target="_blank" rel="noreferrer">inventory example project on GitHub<span class="external-link-icon"> ↗</span></a>.</p><p>Specifically, the command implementations are stored at <a href="https://github.com/naninovel/samples/tree/main/unity/inventory/Assets/NaninovelInventory/Runtime/Commands" class="vp-link" target="_blank" rel="noreferrer">Runtime/Commands<span class="external-link-icon"> ↗</span></a> directory.</p></div><h2 id="overriding-built-in-command" tabindex="-1">Overriding Built-In Command <a class="header-anchor vp-link" href="#overriding-built-in-command" aria-label="Permalink to &quot;Overriding Built-In Command&quot;">​</a></h2><p>In some cases it could be useful to override built-in Naninovel commands. For example, you may want to change how <a href="/api/#print" target="_blank"><code>@print</code></a> commands work without adding a custom one, so that the change will also affect <a href="/naninovel-docs/guide/naninovel-scripts#generic-text-lines" class="vp-link">generic text lines</a> (text from the generic lines is parsed into the print commands under the hood).</p><p>To override a built-in command, add a custom one and apply the same alias built-in command has. Reimport the naninovel scripts (right-click over a folder they&#39;re stored at, then click &quot;Reimport&quot;) after overriding a command in order for the changes to take effect. The custom command will then automatically be used instead of the built-in one when playing a naninovel script.</p><p>Below is an example of overriding built-in <a href="/api/#print" target="_blank"><code>@print</code></a> command, so that the printed text will be logged into the console before being revealed to the player.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;print&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomPrintCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintText</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Text);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(asyncToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p>Find a more useful example of overriding built-in commands <a href="https://forum.naninovel.com/viewtopic.php?f=8&amp;t=53" class="vp-link" target="_blank" rel="noreferrer">on the forum<span class="external-link-icon"> ↗</span></a>. An overridden and custom commands will allow changing reveal speed right inside generic text lines, eg:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">Yuko:</span><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;"> [s</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> 0.1</span><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">]</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;"> Print text 10 times slower than usual. </span><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">[s</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> 2</span><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">]</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;"> Print 2 times faster.</span></span></code></pre></div></div>`,42),l=[t];function h(p,d,r,k,o,c){return i(),a("div",null,l)}const E=s(n,[["render",h]]);export{g as __pageData,E as default};
