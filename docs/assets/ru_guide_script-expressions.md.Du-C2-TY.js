import{_ as s,c as i,o as a,f as t}from"./chunks/framework.BG74BkEs.js";const E=JSON.parse('{"title":"Выражения сценария","description":"","frontmatter":{},"headers":[],"relativePath":"ru/guide/script-expressions.md","filePath":"ru/guide/script-expressions.md","lastUpdated":1698833889000}'),n={name:"ru/guide/script-expressions.md"},e=t(`<h1 id="выражения-сценария" tabindex="-1">Выражения сценария <a class="header-anchor vp-link" href="#выражения-сценария" aria-label="Permalink to &quot;Выражения сценария&quot;">​</a></h1><p>При написании сценариев naninovel можно вводить конструкции выражений в значения параметров команд и общие текстовые строки с помощью фигурных скобок <code>{}</code>:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">One plus two equals </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{1 + 2}</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span></code></pre></div><p>— выведет &quot;One plus two equals 3&quot; при исполнении сценария.</p><p>Вы можете использовать любые математические и логические операторы, а также все математические функции из пространств имён <a href="https://docs.unity3d.com/ScriptReference/Mathf.html" class="vp-link" target="_blank" rel="noreferrer">UnityEngine.Mathf<span class="external-link-icon"> ↗</span></a> и <a href="https://docs.microsoft.com/en-us/dotnet/api/system.math#methods" class="vp-link" target="_blank" rel="noreferrer">System.Math<span class="external-link-icon"> ↗</span></a>:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@char</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> Kohaku</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> scale:</span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{Pow(Cosh(33.5), 3) % Log(0.5)}</span></span></code></pre></div><p>– будет масштабировать персонажа с ID &quot;Kohaku&quot; со значением от деления гиперболического косинуса угла в 33,5 °, возведённого в третью степень, на натуральный логарифм от 0,5.</p><p>Выражение вычисляется в момент выполнения команды, что позволяет использовать <a href="/naninovel-docs/ru/guide/custom-variables" class="vp-link">пользовательские переменные</a> внутри выражений:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@input</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> color</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> summary:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">&quot;What&#39;s your favorite color?&quot;</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@stop</span></span>
<span class="line"><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{color}</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">, huh? </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ color == &quot;orange&quot; ? &quot;Mine too!&quot; : &quot;I see...&quot;}</span></span></code></pre></div><p>— выведет пользовательский интерфейс ввода, позволяющий игроку ввести свой любимый цвет, назначив его пользовательской переменной <code>color</code>, а затем распечатать введенный цвет, а затем либо &quot;Mine too!&quot; – на случай, если это &quot;orange&quot;, или же &quot;I see...&quot;.</p><p>Чтобы отличить обычное текстовое значение от имени переменной, заключите его в двойные кавычки <code>&quot;</code>:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">This is just a plain text: </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ &quot;score&quot; }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span>
<span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">And this is the value of &quot;score&quot; variable: </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ score }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span></code></pre></div><p>Если вы хотите включить двойные кавычки в выражение, экранируйте их <strong>дважды</strong>:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">Saying </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ \\\\&quot;Stop the car\\\\&quot; }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;"> was a mistake.</span></span></code></pre></div><p>Выражения сценария с использованием команд <a href="/ru/api/#set" target="_blank"><code>@set</code></a> и <a href="/ru/api/#if" target="_blank"><code>@if</code></a> (а также <code>set</code> и <code>if</code> параметры в других командах) не требуют фигурных скобок:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@set</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> randomScore=Random(-100,100)</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@goto</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> EpicLabel</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> if:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">Abs(randomScore)&gt;=50</span></span></code></pre></div><p>Однако, как и во всех других значениях параметров, если вы хотите использовать пробелы внутри выражений, вам следует заключить их в двойные кавычки:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@set</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> &quot;randomScore = Random(-100, 100)&quot;</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@goto</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> EpicLabel</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> if:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">&quot;Abs(randomScore) &gt;= 50&quot;</span></span></code></pre></div><p>Чтобы напечатать фигурные скобки внутри общей текстовой строки и предотвратить их распознавание как начальных и конечных литералов выражения, экранируйте фигурные скобки с помощью обратной косой черты, например:</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">Some text \\{ text inside braces \\}</span></span></code></pre></div><p>— напечатает &quot;Some text { text inside braces }&quot; в игре.</p><h2 id="функции-выражении" tabindex="-1">Функции выражений <a class="header-anchor vp-link" href="#функции-выражении" aria-label="Permalink to &quot;Функции выражений&quot;">​</a></h2><p>Внутри выражений сценария также можно использовать следующие функции.</p><div class="config-table"><table><thead><tr><th>Сигнатура?</th><th>Описание</th><th>Пример</th></tr></thead><tbody><tr><td>Random (<em>System.Double</em> min, <em>System.Double</em> max)</td><td>Возвращает случайное число с плавающей точкой между минимальным [включительно] и максимальным [включительно] значениями.</td><td><code>Random(0.1, 0.85)</code></td></tr><tr><td>Random (<em>System.Int32</em> min, <em>System.Int32</em> max)</td><td>Возвращает случайное целое число между минимальным [включительно] и максимальным [включительно] значениями.</td><td><code>Random(0, 100)</code></td></tr><tr><td>Random (<em>System.String[]</em> args)</td><td>Возвращает одну случайную из предоставленных строк.</td><td><code>Random(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Foobar&quot;)</code></td></tr><tr><td>CalculateProgress ()</td><td>Возвращает число с плавающей точкой в диапазоне от 0.0 до 1.0, представляющее, сколько уникальных команд было когда-либо выполнено по сравнению с общим числом команд во всех доступных скриптах Naninovel. 1.0 означает, что игрок <code>прочитал</code> или <code>увидел</code> весь доступный игровой контент. Перед использованием этой функции убедитесь, что в меню конфигурации скрипта включена функция <code>Count Total Commands</code>.</td><td><code>CalculateProgress()</code></td></tr></tbody></table></div><h2 id="добавление-пользовательских-функции" tabindex="-1">Добавление пользовательских функций <a class="header-anchor vp-link" href="#добавление-пользовательских-функции" aria-label="Permalink to &quot;Добавление пользовательских функций&quot;">​</a></h2><p>Можно добавить пользовательские функции выражений, присваивая атрибут <code>ExpressionFunctions</code> статическому классу C#. Все открытые методы этого класса с совместимыми сигнатурами будут автоматически доступны в выражениях сценария.</p><p>Совместимые подписи – это те, которые принимают и возвращают <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types#simple-types" class="vp-link" target="_blank" rel="noreferrer">простые<span class="external-link-icon"> ↗</span></a> и строковые типы, а также массивы этих типов (с ключевым словом <code>params</code>).</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExpressionFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Возвращает предоставленную строку, конвертировав все её символы в нижний регистр.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Возвращает сумму предоставленных чисел.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Возвращает одну случайную из предоставленных строк.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.Length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnityEngine.Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args.Length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[randomIndex];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p>Другой пример добавления пользовательских функций выражений для проверки наличия элемента в инвентаре можно найти в проекте <a href="https://github.com/Naninovel/Inventory" class="vp-link" target="_blank" rel="noreferrer">пример инвентаря на GitHub<span class="external-link-icon"> ↗</span></a>.</p><p>В частности, пользовательские функции реализуются через сценарий выполнения <a href="https://github.com/Naninovel/Inventory/blob/master/Assets/NaninovelInventory/Runtime/InventoryFunctions.cs" class="vp-link" target="_blank" rel="noreferrer">Inventory Functions.cs<span class="external-link-icon"> ↗</span></a>.</p></div>`,29),l=[e];function p(h,k,r,o,d,c){return a(),i("div",null,l)}const y=s(n,[["render",p]]);export{E as __pageData,y as default};
