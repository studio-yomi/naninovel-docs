import{_ as s,c as i,o as a,f as t}from"./chunks/framework.BG74BkEs.js";const y=JSON.parse('{"title":"脚本表达式","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/script-expressions.md","filePath":"zh/guide/script-expressions.md","lastUpdated":1698833889000}'),n={name:"zh/guide/script-expressions.md"},e=t(`<h1 id="脚本表达式" tabindex="-1">脚本表达式 <a class="header-anchor vp-link" href="#脚本表达式" aria-label="Permalink to &quot;脚本表达式&quot;">​</a></h1><p>编写naninovel脚本时，可以使用花括号将表达式构造注入命令参数值和通用文本行{}：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">One plus two equals </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{1 + 2}</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span></code></pre></div><p>— 执行时会打印 &quot;One plus two equals 3&quot; 。</p><p>你可以使用任何数学和逻辑运算符，以及<a href="https://docs.unity3d.com/ScriptReference/Mathf.html" class="vp-link" target="_blank" rel="noreferrer">UnityEngine.Mathf<span class="external-link-icon"> ↗</span></a> 和<a href="https://docs.microsoft.com/en-us/dotnet/api/system.math#methods" class="vp-link" target="_blank" rel="noreferrer">System.Math<span class="external-link-icon"> ↗</span></a> 命名空间中的所有数学函数：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@char</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> Kohaku</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> scale:</span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{Pow(Cosh(33.5), 3) % Log(0.5)}</span></span></code></pre></div><p>— 将ID为 “Kohaku” 的角色缩放值为后面数学运算的结果值。</p><p>在执行命令时对表达式进行求值，允许在表达式内部使用 <a href="/naninovel-docs/zh/guide/custom-variables" class="vp-link">自定义变量</a> ：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@input</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> color</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> summary:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">&quot;What&#39;s your favorite color?&quot;</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@stop</span></span>
<span class="line"><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{color}</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">, huh? </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ color == &quot;orange&quot; ? &quot;Mine too!&quot; : &quot;I see...&quot;}</span></span></code></pre></div><p>— 显示输入框，允许玩家输入喜欢的颜色，将其绑定至 <code>color</code> 自定义变量，如果输入值等于 &quot;orange&quot; ，输出 &quot;Mine too!&quot; 否则输出 &quot;I see...&quot; 。</p><p>要将纯文本值与变量名区分开，请将值用双引号引起来 <code>&quot;</code> ：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">This is just a plain text: </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ &quot;score&quot; }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span>
<span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">And this is the value of &quot;score&quot; variable: </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ score }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">.</span></span></code></pre></div><p>如果您希望在表达式中包含双引号，请对其进行两次转义：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">Saying </span><span style="--shiki-light:#3ABFB3;--shiki-dark:#62B8C1;">{ \\\\&quot;Stop the car\\\\&quot; }</span><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;"> was a mistake.</span></span></code></pre></div><p><a href="/zh/api/#set" target="_blank"><code>@set</code></a> 和 <a href="/zh/api/#if" target="_blank"><code>@if</code></a> 命令中使用的脚本表达式（以及其他命令中的set和if参数）不需要大括号：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@set</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> randomScore=Random(-100,100)</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@goto</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> EpicLabel</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> if:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">Abs(randomScore)&gt;=50</span></span></code></pre></div><p>但是，与所有其他参数值一样，如果希望在表达式内部使用空格，则应将其用双引号引起来：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@set</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> &quot;randomScore = Random(-100, 100)&quot;</span></span>
<span class="line"><span style="--shiki-light:#257DC8;--shiki-dark:#6CB2ED;">@goto</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;"> EpicLabel</span><span style="--shiki-light:#C642A5;--shiki-dark:#CD9769;"> if:</span><span style="--shiki-light:#9250BF;--shiki-dark:#E2BE7F;">&quot;Abs(randomScore) &gt;= 50&quot;</span></span></code></pre></div><p>要在通用文本行内打印花括号并防止将其识别为表达式的开始和结束文字，请使用反斜杠对花括号进行转义，例如：</p><div class="language-nani vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nani</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#4B5871;--shiki-dark:#ACB2BE;">Some text \\{ text inside braces \\}</span></span></code></pre></div><p>— 将在游戏中打印出 &quot;Some text { text inside braces }&quot; 。</p><h2 id="表达式函数" tabindex="-1">表达式函数 <a class="header-anchor vp-link" href="#表达式函数" aria-label="Permalink to &quot;表达式函数&quot;">​</a></h2><p>以下函数也可以在脚本表达式中使用。</p><div class="config-table"><table><thead><tr><th>函数名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>Random (<em>System.Double</em> min, <em>System.Double</em> max)</td><td>返回介于最小值[包含]和最大值[包含]之间的随机浮点数。</td><td><code>Random(0.1, 0.85)</code></td></tr><tr><td>Random (<em>System.Int32</em> min, <em>System.Int32</em> max)</td><td>返回介于min [包含]和max [包含]之间的随机整数。</td><td><code>Random(0, 100)</code></td></tr><tr><td>Random (<em>System.String[]</em> args)</td><td>返回从提供的字符串之一中选择的字符串。</td><td><code>Random(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Foobar&quot;)</code></td></tr><tr><td>CalculateProgress ()</td><td>返回一个介于0.0到1.0范围内的浮点数，表示已经执行命令和Naninovel中总的可执行命令数量的占比关系。 1.0 代表玩家全部 <code>read through</code> （浏览）或 <code>seen</code> （看）过了所有游戏内容。使用此功能之前，请确保在脚本配置菜单中启用 <code>Count Total Commands</code> 。</td><td><code>CalculateProgress()</code></td></tr></tbody></table></div><h2 id="添加自定义函数" tabindex="-1">添加自定义函数 <a class="header-anchor vp-link" href="#添加自定义函数" aria-label="Permalink to &quot;添加自定义函数&quot;">​</a></h2><p>通过将 <code>ExpressionFunctions</code> 属性分配给静态C＃类，可以添加自定义表达式函数。此类具有兼容签名的所有公共方法将自动在脚本表达式中可用。</p><p>兼容的签名是采用和返回<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types#simple-types" class="vp-link" target="_blank" rel="noreferrer">简单<span class="external-link-icon"> ↗</span></a> 和字符串类型的签名，以及这些类型的数组（带有 <code>params</code> 关键字）。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExpressionFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// Returns the provided string with all characters converted to lower-case.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToLower</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Returns the sum of the provided numbers.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Returns a string randomly chosen from one of the provided strings.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.Length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnityEngine.Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args.Length);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[randomIndex];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p><a href="https://github.com/Naninovel/Inventory" class="vp-link" target="_blank" rel="noreferrer">背包示例<span class="external-link-icon"> ↗</span></a> 为演示添加自定义表达式，来判断某个道具是否在背包里。</p><p>另外，命令实现存储在<a href="https://github.com/Naninovel/Inventory/blob/master/Assets/NaninovelInventory/Runtime/InventoryFunctions.cs" class="vp-link" target="_blank" rel="noreferrer">InventoryFunctions.cs<span class="external-link-icon"> ↗</span></a> 目录中。</p></div>`,29),h=[e];function l(p,k,r,o,d,c){return a(),i("div",null,h)}const E=s(n,[["render",l]]);export{y as __pageData,E as default};
