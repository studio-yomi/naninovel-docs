import{_ as s,c as a,o as i,f as t}from"./chunks/framework.BG74BkEs.js";const g=JSON.parse('{"title":"カスタムコマンド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/guide/custom-commands.md","filePath":"ja/guide/custom-commands.md","lastUpdated":1698833889000}'),e={name:"ja/guide/custom-commands.md"},n=t(`<h1 id="カスタムコマンド" tabindex="-1">カスタムコマンド <a class="header-anchor vp-link" href="#カスタムコマンド" aria-label="Permalink to &quot;カスタムコマンド&quot;">​</a></h1><p>コマンドは、シーンで起きることを制御する単一の操作を表します。たとえば、背景の変更、キャラクターの移動、別のnaninovelスクリプトの読み込みに使用できます。<a href="/naninovel-docs/ja/guide/naninovel-scripts" class="vp-link">Naninovel スクリプト</a> で定義されたパラメーター化されたコマンドシーケンスは、ゲームフローを効果的に制御します。使用可能な組み込みコマンドは <a href="/naninovel-docs/ja/api/" class="vp-link">APIリファレンス</a> に記載されています。コードでは、すべての組み込みスクリプトコマンドの実装は、<code>Naninovel.Commands</code> ネームスペース以下に定義されています。</p><p>独自のカスタムスクリプトコマンドを追加するには、<code>Command</code> から派生した新しい C# クラスを作成し、抽象メソッド <code>ExecuteAsync</code> を実装します。作成されたクラスはエンジンによって自動的に取得され、クラス名またはエイリアス（割り当てられている場合）によってnaninovelスクリプトからコマンドを呼び出すことができます。 naninovelコマンドにエイリアスを割り当てるには、クラスに <code>CommandAlias</code> 属性を適用します。</p><p><code>ExecuteAsync</code> はコマンドがスクリプトプレイヤーで実行される時に呼び出される非同期メソッドで、そこにコマンドロジックを配置します。エンジンの組み込みシステムへアクセスするには <a href="/naninovel-docs/ja/guide/engine-services" class="vp-link">エンジンサービス</a> を使用してください。Naninovelスクリプトの実行は、<code>Wait</code> パラメータが <code>true</code> の場合に、メソッドが完了したタスクを返すまで停止します。</p><p>コマンドパラメータをnaninovelスクリプトに公開するには、サポートされているいずれかのタイプを使用して、コマンドクラスにパブリックフィールドを追加します:</p><table><thead><tr><th>フィールドタイプ</th><th>値のタイプ</th><th>スクリプト例</th></tr></thead><tbody><tr><td>StringParameter</td><td>String</td><td><code>LoremIpsum</code>, <code>&quot;Lorem ipsum&quot;</code></td></tr><tr><td>IntegerParameter</td><td>Int32</td><td><code>10</code>, <code>0</code>, <code>-1</code></td></tr><tr><td>DecimalParameter</td><td>Single</td><td><code>0.525</code>, <code>-55.1</code></td></tr><tr><td>BooleanParameter</td><td>Boolean</td><td><code>true</code>, <code>false</code></td></tr><tr><td>NamedStringParameter</td><td>NamedString</td><td><code>Script001.LabelName</code>, <code>.LabelName</code></td></tr><tr><td>NamedIntegerParameter</td><td>NamedInteger</td><td><code>Yuko.5</code></td></tr><tr><td>NamedDecimalParameter</td><td>NamedFloat</td><td><code>Kohaku.-10.25</code></td></tr><tr><td>NamedBooleanParameter</td><td>NamedBoolean</td><td><code>Misaki.false</code></td></tr><tr><td>StringListParameter</td><td>List&lt;String&gt;</td><td><code>Lorem,ipsum,&quot;doler sit amet&quot;</code></td></tr><tr><td>IntegerListParameter</td><td>List&lt;Int32&gt;</td><td><code>10,-1,0</code></td></tr><tr><td>DecimalListParameter</td><td>List&lt;Single&gt;</td><td><code>0.2,10.5,-88.99</code></td></tr><tr><td>BooleanListParameter</td><td>List&lt;Boolean&gt;</td><td><code>true,false,true</code></td></tr><tr><td>NamedStringListParameter</td><td>List&lt;NamedString&gt;</td><td><code>Felix.Happy,Jenna.Confidence</code></td></tr><tr><td>NamedIntegerListParameter</td><td>List&lt;NamedInteger&gt;</td><td><code>Yuko.5,Misaki.-8</code></td></tr><tr><td>NamedDecimalListParameter</td><td>List&lt;NamedFloat&gt;</td><td><code>Nanikun.88.99,Yuko.-5.1</code></td></tr><tr><td>NamedBooleanListParameter</td><td>List&lt;NamedBoolean&gt;</td><td><code>Misaki.false,Kohaku.true</code></td></tr></tbody></table><p>任意でフィールドに <code>[ParameterAlias]</code> 属性を適用して、パラメーターにエイリアス名を割り当て、naninovelスクリプトでパラメーターを参照するときにフィールド名の代わりに使用することができます。 パラメータを無名にしたい場合は、エイリアスとして <code>Command.NamelessParameterAlias</code> 定数（空の文字列）を設定します。コマンドごとに設定できる無名パラメーターは1つだけです。</p><p>パラメーターを必須にするには（naninovelスクリプトで指定されていないときにエラーがログに記録されるようにするため）、フィールドに <code>[RequiredParameter]</code> 属性を適用します。属性が適用されていない場合、パラメーターはオプションと見なされます。</p><p>すべてのパラメータータイプには <code>HasValue</code> プロパティがあり、これを使用して、naninovelスクリプトでパラメーターが割り当てられているかどうかをテストできます。任意で <code>Command.Assigned()</code> 静的メソッドを使用できます。これはパラメーターインスタンスを取得し、指定されたパラメーターが null ではなく、値が割り当てられている場合に true を返します。</p><p>コマンドの実行にリソースのロードが必要な場合は、<code>Command.IPreloadable</code> インターフェースを実装して、ゲームのロード時に必要なリソースを事前ロードします。</p><p>コマンドにローカライズが必要なパラメーターがある場合（ユーザーに直接表示されるテキスト）、 <code>Command.ILocalizable</code> インターフェイスを実装して、生成されたスクリプトローカリゼーションドキュメントにコマンドを追加します。</p><p>すべての組み込みコマンド実装を含むスクリプトは、<code>Naninovel/Runtime/Commands</code> パッケージフォルダーにあります。独自のカスタムコマンドを実装するときは、参考にしてください。</p><p>以下はカスタムコマンドの例です。naninovelスクリプトから <code>@HelloWorld</code> または <code>@hello</code> で呼び出し、<code>Hello World!</code> をコンソールに出力できます。また、worldの代わりにオプションの <code>name</code> パラメータ（例: <code>@hello name:Felix</code>）を受け取って挨拶することもできます。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniRx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Name))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Hello, {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UniTask.CompletedTask;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オプションの <code>AsyncToken</code> 引数に注意してください。非同期メソッドを呼び出す場合は、キャンセルリクエストのトークンを確認して、できるだけ早く返してください。</p><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p>別の例として、インベントリシステムにアイテムを追加/削除するカスタムコマンドは <a href="https://github.com/Naninovel/Inventory" class="vp-link" target="_blank" rel="noreferrer">GitHubのインベントリサンプルプロジェクト<span class="external-link-icon"> ↗</span></a> で見ることができます。</p><p>具体的には、コマンドの実装は <a href="https://github.com/Naninovel/Inventory/tree/master/Assets/NaninovelInventory/Runtime/Commands" class="vp-link" target="_blank" rel="noreferrer">Runtime/Commands<span class="external-link-icon"> ↗</span></a> ディレクトリに保存されています。</p></div>`,16),d=[n];function l(p,h,o,k,r,c){return i(),a("div",null,d)}const m=s(e,[["render",l]]);export{g as __pageData,m as default};
