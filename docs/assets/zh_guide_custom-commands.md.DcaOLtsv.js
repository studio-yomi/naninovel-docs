import{_ as s,c as i,o as a,f as t}from"./chunks/framework.BG74BkEs.js";const g=JSON.parse('{"title":"自定义命令","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/custom-commands.md","filePath":"zh/guide/custom-commands.md","lastUpdated":1698833889000}'),e={name:"zh/guide/custom-commands.md"},n=t(`<h1 id="自定义命令" tabindex="-1">自定义命令 <a class="header-anchor vp-link" href="#自定义命令" aria-label="Permalink to &quot;自定义命令&quot;">​</a></h1><p>命令代表单个操作，控制这场景中的发生事件。比如，可以用于改变背景，移动角色，或是加载其他脚本。<a href="/naninovel-docs/zh/guide/naninovel-scripts" class="vp-link">naninovel 脚本</a> 定义的参数化命令序列可有效控制游戏流程。您可以在<a href="/naninovel-docs/zh/api/" class="vp-link">API参考 </a> 中找到可用的内置命令。在代码中，所有内置脚本命令实现均在 <code>Naninovel.Commands</code> 命名空间下定义。</p><p>要添加自己的自定义脚本命令，请创建一个C#的新类派生自<code>Command</code> 并实现ExecuteAsync抽象方法。引擎将自动选择创建的类，能够通过类名或别名（如果已分配）从naninovel脚本调用命令。要将别名分配给naninovel命令，请将<code>CommandAlias</code> 标签应用于该类。</p><p><code>ExecuteAsync</code> 是当脚本执行命令时调用的异步方法。使用 <a href="/naninovel-docs/zh/guide/engine-services" class="vp-link">引擎服务</a> 访问引擎内置系统。Naninovel脚本将会暂停，直到该执行方法完成返回 <code>Wait</code> 参数为 <code>true</code>。</p><p>要将命令参数公开给naninovel脚本，请使用一种受支持的类型向命令类添加一个公共字段：</p><table><thead><tr><th>字段类型</th><th>值类型</th><th>脚本示例</th></tr></thead><tbody><tr><td>StringParameter</td><td>String</td><td><code>LoremIpsum</code>, <code>&quot;Lorem ipsum&quot;</code></td></tr><tr><td>IntegerParameter</td><td>Int32</td><td><code>10</code>, <code>0</code>, <code>-1</code></td></tr><tr><td>DecimalParameter</td><td>Single</td><td><code>0.525</code>, <code>-55.1</code></td></tr><tr><td>BooleanParameter</td><td>Boolean</td><td><code>true</code>, <code>false</code></td></tr><tr><td>NamedStringParameter</td><td>NamedString</td><td><code>Script001.LabelName</code>, <code>.LabelName</code></td></tr><tr><td>NamedIntegerParameter</td><td>NamedInteger</td><td><code>Yuko.5</code></td></tr><tr><td>NamedDecimalParameter</td><td>NamedFloat</td><td><code>Kohaku.-10.25</code></td></tr><tr><td>NamedBooleanParameter</td><td>NamedBoolean</td><td><code>Misaki.false</code></td></tr><tr><td>StringListParameter</td><td>List&lt;String&gt;</td><td><code>Lorem,ipsum,&quot;doler sit amet&quot;</code></td></tr><tr><td>IntegerListParameter</td><td>List&lt;Int32&gt;</td><td><code>10,-1,0</code></td></tr><tr><td>DecimalListParameter</td><td>List&lt;Single&gt;</td><td><code>0.2,10.5,-88.99</code></td></tr><tr><td>BooleanListParameter</td><td>List&lt;Boolean&gt;</td><td><code>true,false,true</code></td></tr><tr><td>NamedStringListParameter</td><td>List&lt;NamedString&gt;</td><td><code>Felix.Happy,Jenna.Confidence</code></td></tr><tr><td>NamedIntegerListParameter</td><td>List&lt;NamedInteger&gt;</td><td><code>Yuko.5,Misaki.-8</code></td></tr><tr><td>NamedDecimalListParameter</td><td>List&lt;NamedFloat&gt;</td><td><code>Nanikun.88.99,Yuko.-5.1</code></td></tr><tr><td>NamedBooleanListParameter</td><td>List&lt;NamedBoolean&gt;</td><td><code>Misaki.false,Kohaku.true</code></td></tr></tbody></table><p>另外，您可以将 <code>[ParameterAlias]</code>属性应用于字段，作为参数别名，从而在naninovel脚本中引用参数时可以使用别名而不是字段名称。如果想设置为无名参数，则将 <code>Command.NamelessParameterAlias</code> 常量（空字符串）设置为别名；请注意，每个命令只允许使用一个无名参数。</p><p>要使参数为必需设置的（在naninovel脚本中未指定该参数时会在控制台报错），请将 <code>[RequiredParameter]</code> 属性应用于该字段。如果不应用该属性，则该参数被视为可选参数。</p><p>所有参数类型都有 <code>HasValue</code> 属性，可以使用它来测试是否已在naninovel脚本中分配了参数；（可选）可以使用 <code>Command.Assigned()</code> 静态方法，该方法采用参数实例，并在提供的参数不为null并分配了值时返回true。</p><p>如果命令的执行需要加载一些资源，实现<code>Command.IPreloadable</code> 接口，以在游戏加载时时预加载要使用的资源。</p><p>如果命令具有可以本地化的参数（通常直接向用户显示文本），请实现 <code>Command.ILocalizable</code> 接口以将命令添加到生成的脚本本地化文档中。</p><p>您可以在 <code>Naninovel/Runtime/Commands</code>文件夹中找到所有内置命令实现的脚本。在实现自己的自定义命令时，可以随时将它们用作参考。</p><p>这是一个自定义命令的示例，可以从naninovel脚本调用该命令 <code>@HelloWorld</code> 或 <code>@hello</code> 将 <code>Hello World!</code> 打印到控制台，还可以使用一个可选 <code>name</code> 参数（例如<code>@hello name:Felix</code>）来提供名称：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes theme-light theme-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Naninovel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Commands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Threading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniRx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CommandAlias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringParameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UniTask</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExecuteAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asyncToken</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Assigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Name))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Hello, {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UniTask.CompletedTask;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意可选 <code>AsyncToken</code> 参数。如果调用任何异步方法，请确保检查该值的取消请求，并尽快返回该值。</p><div class="tip custom-block"><p class="custom-block-title">EXAMPLE</p><p>关于添加自定义命令来在背包中增加删除道具的示例在<a href="https://github.com/Naninovel/Inventory" class="vp-link" target="_blank" rel="noreferrer">背包示例项目中<span class="external-link-icon"> ↗</span></a> 。</p><p>另外，命令实现存储在<a href="https://github.com/Naninovel/Inventory/tree/master/Assets/NaninovelInventory/Runtime/Commands" class="vp-link" target="_blank" rel="noreferrer">Runtime/Commands<span class="external-link-icon"> ↗</span></a> 目录中。</p></div>`,16),d=[n];function l(p,h,k,o,r,c){return a(),i("div",null,d)}const m=s(e,[["render",l]]);export{g as __pageData,m as default};
